version: 2.1

executors:
  nodejs-executor:
  # working directory: /home/circleci/project
    docker:
      # - image: circleci/node:14.18.2
      - image: cimg/node:13.14.0

  awscli-executor:
  # working directory: root/project
    docker:
      - image: amazon/aws-cli:2.12.1

  python-executor:
  # working directory root/project
    docker:
      - image: python:3.7-alpine3.11
  

orbs:
  slack: circleci/slack@4.4.2
  aws-cli: circleci/aws-cli@0.1.2
  aws-s3: circleci/aws-s3@1.0.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      backend:
        type: string
        default: ""
      frontend:
        type: string
        default: ""
      bucket_name:
        type: string
        default: ""
      when:
        type: enum
        enum: ["always", "on_success", "on_fail"]
        default: "on_fail"
    steps:
      - run:
          name: "Delete << parameters.bucket_name >> bucket"
          when: << parameters.when >>
          command: |
            BUCKET_NAME="<< parameters.bucket_name >>"
            # bucket_name not provied
            if [[ -z $BUCKET_NAME ]]
            then
                echo "Bucket not provied. Skip the delete bucket action !"
              exit 0
            fi

            BUCKET_URI="s3://$BUCKET_NAME"
            BUCKKET_INFO=$(aws s3 ls $BUCKET_URI 2>&1)

            if echo $BUCKKET_INFO | grep 'NoSuchBucket'
            then
              echo "Bucket doesn't exist, skip the empty bucket action"
              exit 0
            fi

            # do empty bucket before deleting
            aws s3 rm $BUCKET_URI --recursive

      - run:
          name: "Delete stack"
          when: << parameters.when >>
          command: |
            STACK_NAME="<< parameters.backend >>"
            # stack_name not provied
            if [[ -z $STACK_NAME ]]
            then
                echo "Stack not provied. Skip the delete stack action !"
              exit 0
            else 
              echo "deleting stack $STACK_NAME ..."
              aws cloudformation delete-stack --stack-name << parameters.backend >>
            fi

            STACK_NAME="<< parameters.frontend >>"
            # stack_name not provied
            if [[ -z $STACK_NAME ]]
            then
                echo "Stack not provied. Skip the delete stack action !"
              exit 0
            else 
              echo "deleting stack $STACK_NAME ..."
              aws cloudformation delete-stack --stack-name << parameters.frontend >>
            fi

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string      
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl https://kvdb.io/5wmWmpBowaqtCzGWxLD169/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

  trigger_slack_notification:
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  notify_slack_fail:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

jobs:
  build-frontend:
    executor: nodejs-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            echo "node:$(node --version)" && echo "npm:$(npm --version)"
            npm install
            npm run build
      - notify_slack_pass
      - notify_slack_fail

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    executor: nodejs-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            echo "node:$(node --version)" && echo "npm:$(npm --version)"
            npm install
            npm run build
            # zip backend artifact
            cd ..
            mkdir -p home/circleci/workspace
            tar -C backend -czvf artifact.tar.gz .
            # Move backend artifact to ansible deploy
            mv artifact.tar.gz home/circleci/workspace/     
      - notify_slack_pass
      - notify_slack_fail

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - persist_to_workspace:
          root: home/circleci/workspace/
          paths:
            - artifact.tar.gz
      
  test-frontend:
    executor: nodejs-executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Run front-end test
          command: |
            cd frontend
            echo "node:$(node --version)" && echo "npm:$(npm --version)"
            npm install
            npm run test
              
  test-backend:
    executor: nodejs-executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Run back-end test
          command: |
            cd backend
            echo "node:$(node --version)" && echo "npm:$(npm --version)"
            npm install
            npm run test
            
  scan-frontend:
    executor: nodejs-executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Audit frontend for vulnerability
          command: |
            cd frontend
            echo "node:$(node --version)" && echo "npm:$(npm --version)"
            npm install
            npm audit fix --audit-level=critical
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  scan-backend:
    executor: nodejs-executor
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Audit backend for vulnerability
          command: |
            cd backend
            echo "node:$(node --version)" && echo "npm:$(npm --version)"
            npm install
            npm audit fix --audit-level=critical
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  deploy-infrastructure:
    executor: awscli-executor
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
          command: |
            echo "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople Name=backend-${CIRCLE_WORKFLOW_ID:0:7}
            
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            echo "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople Name=frontend-${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Create workspace- Show Working Directory
          command: |
            cd ..
            mkdir -p /root/workspace
            pwd && ls -ls
      - run:
          name: copy inventory file to workspace
          command: |
            cp .circleci/ansible/inventory.txt /root/workspace

      - persist_to_workspace:
          root: /root/workspace
          paths:
            - inventory.txt
      #Here's where you will add some code to rollback on failure
      - destroy-environment:
            backend: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            frontend: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            bucket_name: "udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
      
  configure-infrastructure:
    # Docker image here that supports Ansible
    executor: python-executor
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["5e:00:73:c4:88:cd:40:fa:a8:38:fa:0e:f9:4c:a8:4b"]
      - attach_workspace:
          at: /root/workspace
      - run:
          name: Show workspace content
          command: |
            ls -ls /root/workspace
      - run:
          name: Show Working Directory
          command: pwd && ls -ls
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            # Your code here
            cp /root/workspace/inventory.txt .circleci/ansible
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure

  run-migrations:
    # Docker image here that supports NodeJS
    executor: nodejs-executor
    steps:
      # Checkout code from 
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Show Working Directory
          command: pwd && ls -ls
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            export KVDBIO_URL=https://kvdb.io/5wmWmpBowaqtCzGWxLD169/migration_${CIRCLE_WORKFLOW_ID:0:7}
            echo $KVDBIO_URL
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl $KVDBIO_URL -d '1'
            else
              curl $KVDBIO_URL -d '0'
            fi
            # Here's where you will add some code to rollback on failure     
  
  deploy-frontend:
    # Docker image here that supports AWS CLI
    executor: awscli-executor
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y nodejs
            echo "node:$(node --version)" && echo "npm:$(npm --version)"
            mkdir -p /root/workspace
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL > frontend/.env
            cat frontend/.env
            # save to workspace
            echo $BACKEND_IP > /root/workspace/be_endpoint
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            # Copy frontend to S3
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            # save to workspace
            export STATIC_HOST=https://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.amazonaws.com
            cd ..
            pwd
            echo $STATIC_HOST > /root/workspace/fe_static_host
            
      - persist_to_workspace:
          root: /root/workspace
          paths:
            - be_endpoint
            - fe_static_host
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    # Docker image here that supports Ansible
    executor: python-executor
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["5e:00:73:c4:88:cd:40:fa:a8:38:fa:0e:f9:4c:a8:4b"]
      - attach_workspace:
          at: /root/workspace
      - run:
          name: Show workspace content
          command: |
            ls -ls /root/workspace
      - run:
          name: print inventory file and copy to .circleci/ansible
          command: |
            echo "Where am I ?"
            pwd && ls /root
            cat /root/workspace/inventory.txt
            echo "Copy inventory.txt to ansible"
            cat /root/workspace/inventory.txt
            cp /root/workspace/inventory.txt .circleci/ansible
            echo "Copy artifact.tar.gz to ansible"
            cp /root/workspace/artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            ls -ls .circleci/ansible/roles/deploy/files/
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            echo "Contents of the inventory.txt file is -------"
            cd .circleci/ansible/
            cat inventory.txt
            echo "Run Ansible playbook for backend"
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure  

  smoke-test:
    # Lightweight Docker image
    executor: awscli-executor
    steps:
      - checkout
      - attach_workspace:
          at: /root/workspace
      - run:
          name: Show workspace content
          command: |
            ls -ls /root/workspace
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(cat root/workspace/be_endpoint)
            API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            FE_STATIC_HOST=$(cat root/workspace/fe_static_host)
            FE_URL="https://$FE_STATIC_HOST/index.html"
            REPONSE = $(eval curl -s $FE_URL)
            if echo $RESPONSE | grep "View & Manage Employees" 
            then
              echo "Frontend smoke test passed"
              echo $REPONSE
              return 0
            else
              echo "Frontend smoke test fail"
              return 1
            fi
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    # Docker image here that supports AWS CLI
    executor: awscli-executor
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-objects workflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople Name=udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend:
          context: slack-secrets
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     context: slack-secrets
      #     requires: [build-backend]
      # - scan-frontend:
      #     context: slack-secrets
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          requires: [build-frontend, build-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]